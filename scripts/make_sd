#! /bin/bash

#
# Script used to create an SD image
#   -- Run as 'root'
#   -- Requires worker script 'mkcard.sh' to be on $PATH
#

# Evaluate arguments so variables can be easily overridden
for i in $*; do
  if echo $i | grep -q '='; then
    eval $i
  fi
done

usage() {
  echo "usage: make_sd DISK=<disk_dev> [KERNEL=<?Image>] [KERNEL_IMAGE_NAME=zImage] [DTB=<device-tree>] [DTB_IMAGE_NAME=zImage.dtb] [ROOTFS=<rootfs>] [MLO=mlo] [UBOOT=uboot] [UBOOT_IMAGE_NAME=u-boot.img]"
  exit 1
}  

DISK=${DISK:=none}
KERNEL=${KERNEL:-zImage}
KERNEL_IMAGE_NAME=${KERNEL_IMAGE_NAME:=zImage}
DTB=${DTB:-none}
DTB_IMAGE_NAME=${DTB_IMAGE_NAME:=`basename ${DTB} .dtb`.dtb}
ROOTFS=${ROOTFS:=none}
MLO=${MLO:-""}
UBOOT=${UBOOT:-""}
UBOOT_IMAGE_NAME=${UBOOT_IMAGE_NAME:-"u-boot.img"}
UENV=${UENV:=""}

# Check for required arguments
if [ ${DISK} == "none" -o ${ROOTFS} == "none" ]; then
    usage
fi

MDEV=`basename ${DISK}`
if ! fgrep -q ${MDEV} /proc/partitions; then
  echo "*** Are you sure?  ${DISK} is not in partition list"
  exit 1
fi

echo "========================================"
echo ""
echo "About to create SD:"
echo "  SD device = ${DISK}"
if [ "${KERNEL}" != "none" ]; then
  KERNEL=`readlink -e ${KERNEL}`
  echo "  Kernel ?Image file = ${KERNEL}"
  echo "                       ... installed as ${KERNEL_IMAGE_NAME}"
fi
if [ "${DTB}" != "none" ]; then
  DTB=`readlink -e ${DTB}`
  echo "  Device tree file = ${DTB}"
  echo "                     ... installed as ${DTB_IMAGE_NAME}"
fi
ROOTFS=`readlink -e ${ROOTFS}`
echo "  root file system = ${ROOTFS}"
if [ "x$MLO" != "x" ]; then
  MLO=`readlink -e $MLO`
  echo "  MLO = ${MLO}"
fi
if [ "x$UBOOT" != "x" ]; then
  UBOOT=`readlink -e $UBOOT`
  echo "  UBOOT = ${UBOOT}"
  echo "          ... installed as ${UBOOT_IMAGE_NAME}"
fi
if [ "x$UENV" != "x" ]; then
  UENV=`readlink -e $UENV`
  echo "  UENV = ${UENV}"
fi
echo ""
echo "========================================"

read -p "Continue? " OK

if [ "${OK}" == "yes" ]; then
  echo "****************************************"
  echo "Format SD card"
  mkcard.sh ${DISK} >/tmp/mkcard.log 2>&1
  echo "****************************************"
  mkdir -p /tmp/media
  mount ${DISK}1 /tmp/media
  if [ "x$MLO" != "x" ]; then
    echo "Install MLO"
    cp ${MLO} /tmp/media/MLO
  fi
  if [ "x$UBOOT" != "x" ]; then
    echo "Install U-Boot"
    cp ${UBOOT} /tmp/media/${UBOOT_IMAGE_NAME}
  fi
  if [ "x$UENV" != "x" ]; then
    echo "Install U-Boot environment"
    cp ${UENV} /tmp/media/uEnv.txt
  fi
  if [ "${KERNEL}" != "none" ]; then
    echo "Copy kernel"
    cp ${KERNEL} /tmp/media/${KERNEL_IMAGE_NAME}
  fi
  if [ "${DTB}" != "none" ]; then
    echo "Copy device tree"
    cp ${DTB} /tmp/media/${DTB_IMAGE_NAME}
  fi
  sync
  umount /tmp/media
  echo "****************************************"
  echo "Install root file system"
  mount ${DISK}2 /tmp/media
  if `echo ${ROOTFS} | fgrep -q bz2`; then
    tar -jxpf ${ROOTFS} -C /tmp/media
  else
    tar -zxpf ${ROOTFS} -C /tmp/media
  fi
  if [ "${KERNEL}" != "none" ]; then
    mkdir -p /tmp/media/boot
    # cp ${KERNEL} /tmp/media/boot/${KERNEL_IMAGE_NAME}
    if [ "${DTB}" != "none" ]; then
      cp ${DTB} /tmp/media/boot/${DTB_IMAGE_NAME}
    fi
    sync
  fi
  umount /tmp/media
  sync
fi


