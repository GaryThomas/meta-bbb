=========== Setting up the Poky/Yocto source trees (meta-data, sources, etc) ===============

Place the Yocto meta-data like this:
  ${YOCTO}:
    meta
    meta-yocto
    meta-yocto-bsp
    ...
At the same level, add the layers for the BBB
    meta-beaglebone
    meta-bbb

These commands will create this structure, using the latest master/tip
of each of the appropriate trees.  Choose some top level location for
your Poky/Yocto tree, e.g. ${YOCTO}  (fill in your chosen path)

  % git clone git://git.pokylinux.org/poky.git ${YOCTO}
  % cd ${YOCTO}
  % git clone https://github.com/koenkooi/meta-beagleboard.git meta-beagleboard
  % git clone https://github.com/GaryThomas/meta-bbb.git

By default, the layer is set up to use a local source mirror (which can save a
ton of downloading time!).  The simplest way to do this is to add a symbolic
link at the top of the ${YOCTO} tree.  For my setup, I use this:
  % ln -sf /work/misc/Poky/sources ${YOCTO}/sources
My '/work/misc/Poky/sources' is on a shared NFS drive available on all my
systems under the same path.

========== Building using Poky/Yocto

With Poky/Yocto, you build in a separate location from the sources (typically
and IMO, recommended).  There is a single command (thanks to the meta-bbb layer)
that can set this up for you.  Choose where you want to build as ${BUILD}.  Note
that the first/master build will need a lot of disk space (upwards of 50GB).

  % TEMPLATECONF=meta-bbb/conf . ${YOCTO}/oe-init-build-env ${BUILD}

This will create the directory ${BUILD} and populate it with Poky/Yocto control
files.  It will also update the shell environment to be ready to build.

********* CAUTION!  Do not try to put ${BUILD} on an NFS shared volume.  This
*********           is know to cause major problems!  You can have ${YOCTO}
*********           and/or ${YOCTO}/sources on NFS, but not ${BUILD}

Now, to build an image, e.g. 'core-image-sato' which is a reasonably complete
"desktop" style image for the BBB, simply type:

  % bitbake core-image-sato

Sit back (or go have dinner) as this will take many hours (probably 4-5).

When the build completes, the fruits (results) are placed in the tmp/deploy/images/
directory of the build tree.  In this case, it may look something like this:

  % ls -l tmp/deploy/images/beaglebone
  total 232832
  -rw-r--r-- 1 gthomas gthomas    15778 Apr 16 09:14 core-image-sato-beaglebone-20140416123319.rootfs.manifest
  -rw-r--r-- 1 gthomas gthomas 66847733 Apr 16 09:15 core-image-sato-beaglebone-20140416123319.rootfs.tar.gz
  -rw-r--r-- 1 gthomas gthomas 30699848 Apr 16 09:16 core-image-sato-beaglebone-20140416123319.rootfs.tar.xz
  -rw-r--r-- 1 gthomas gthomas    15778 Apr 17 03:05 core-image-sato-beaglebone-20140417090242.rootfs.manifest
  -rw-r--r-- 1 gthomas gthomas 66847820 Apr 17 03:06 core-image-sato-beaglebone-20140417090242.rootfs.tar.gz
  -rw-r--r-- 1 gthomas gthomas 30702604 Apr 17 03:07 core-image-sato-beaglebone-20140417090242.rootfs.tar.xz
  lrwxrwxrwx 1 gthomas gthomas       57 Apr 17 03:07 core-image-sato-beaglebone.manifest -> core-image-sato-beaglebone-20140417090242.rootfs.manifest
  lrwxrwxrwx 1 gthomas gthomas       55 Apr 17 03:07 core-image-sato-beaglebone.tar.gz -> core-image-sato-beaglebone-20140417090242.rootfs.tar.gz
  lrwxrwxrwx 1 gthomas gthomas       55 Apr 17 03:07 core-image-sato-beaglebone.tar.xz -> core-image-sato-beaglebone-20140417090242.rootfs.tar.xz
  lrwxrwxrwx 1 gthomas gthomas       22 Apr 16 09:08 MLO -> MLO-beaglebone-2014.01
  lrwxrwxrwx 1 gthomas gthomas       22 Apr 16 09:08 MLO-beaglebone -> MLO-beaglebone-2014.01
  -rwxr-xr-x 2 gthomas gthomas   105396 Apr 16 09:08 MLO-beaglebone-2014.01
  -rw-rw-r-- 2 gthomas gthomas 38046187 Apr 16 09:05 modules--3.8.13-r23z.2-beaglebone-20140416123319.tgz
  lrwxrwxrwx 1 gthomas gthomas       52 Apr 16 09:05 modules-beaglebone.tgz -> modules--3.8.13-r23z.2-beaglebone-20140416123319.tgz
  -rw-rw-r-- 2 gthomas gthomas      294 Apr 17 03:04 README_-_DO_NOT_DELETE_FILES_IN_THIS_DIRECTORY.txt
  -rwxr-xr-x 2 gthomas gthomas   383140 Apr 16 09:08 u-boot-beaglebone-2014.01-r0.img
  lrwxrwxrwx 1 gthomas gthomas       32 Apr 16 09:08 u-boot-beaglebone.img -> u-boot-beaglebone-2014.01-r0.img
  lrwxrwxrwx 1 gthomas gthomas       32 Apr 16 09:08 u-boot.img -> u-boot-beaglebone-2014.01-r0.img
  lrwxrwxrwx 1 gthomas gthomas       51 Apr 16 09:05 zImage -> zImage--3.8.13-r23z.2-beaglebone-20140416123319.bin
  -rw-r--r-- 2 gthomas gthomas  4727384 Apr 16 09:04 zImage--3.8.13-r23z.2-beaglebone-20140416123319.bin
  lrwxrwxrwx 1 gthomas gthomas       51 Apr 16 09:05 zImage-beaglebone.bin -> zImage--3.8.13-r23z.2-beaglebone-20140416123319.bin

Notice that there are multiple 'core-image-sato*' files/images.  This is because I've built
the image a few times, with some changes.  The most recent versions are always accessible
via the symbolic links.

========== Deploying to the board

To run these images, place them on an SD card.  Scripts have been provided for
this to make it simpler, assuming you have an SD slot or USB/SD adapter on your
computer.  I often build on remote systems and move the results to my local
machine where the SD adapter is located using a command like this:

  % rsync -auvL tmp/deploy/images/beaglebone/core-image-sato-beaglebone.tar.gz \
                tmp/deploy/images/beaglebone/u-boot-beaglebone.img \
                tmp/deploy/images/beaglebone/MLO-beaglebone \
                /work/tmp/bbb_2014-04-10

These are the images/files that you will need to create the SD card image:
  core-image-sato-beaglebone.tar.gz - this contains the root file system
  u-boot-beaglebone.img - this file is what boots Linux from the SD card
  MLO-beaglebone - this is stage 1 of the bootstrap

To create the SD card from these images, use this command sequence:

  % export PATH=${YOCTO}/meta-bbb/scripts:$PATH
  % cd /work/tmp/bbb_2014-04-10
  % sudo make_sd /dev/sdX none core-image-sato-beaglebone.tar.gz MLO=MLO-beaglebone UBOOT_IMG=u-boot-beaglebone.img

The script will prompt you before it does anything destructive.  You must type
'yes' (not just 'y') for it to proceed.

In a few minutes, you'll have a ready to boot SD card.

You should be ready to access the BeagleBone* board using it's serial/debug interface.
For the BeagleBoneBlack, this requires an optional USB cable.

It's also easiest to always boot from the SD card.  The BBB has an eMMC device which
can be used, but at the beginning, stick with an external SD card.

To make the BBB always use the SD card, type these commands into the serial/debug port:

  U-Boot> mmc dev 1
  U-Boot> mmc erase 0 512

Now, insert the SD card and press RESET.  The board should boot into Linux.

========= Using sstate for quicker/shared builds
  T.B.D.

========= Using opkg to manage packages on the target

The various packages built from the Yocto recipes can be installed, removed, updated,
etc. on the target, much like you would use YUM (on Fedora) or DPKG/APT-GET (on Debian)
For this to work, the package set(s) need to be exported, normally using HTTP.  For
this task, a simple web server will do, but you can choose any one you are comfortable
with.  The packages are kept in the ${BUILD}/tmp/deploy/ipk tree.  This will have a
number of subtrees, covering all, architecture and target specific packages.  Export
the top of this tree, e.g. when using lighttpd
  # ln -sf ${BUILD}/tmp/deploy/ipk /var/www/${TARGET}-feeds
The symbolic name is important as that's where opkg will be looking for the files
on the HTTP server.  These settings are in ${BUILD}/conf/local.conf
  FEEDURIPREFIX  = "http://my.local.com/${MACHINE}-feeds"
In this case, the HTTP server is 'my.local.com' and the packages are at ${MACHINE}-feeds

Once the HTTP server is set up, and whenever any packages on the build host are updated,
you'll need to rebuild the package databases.  This is very important as without it, the
"feeds" will be stale and not work properly.
  % bitbake package-index
The package databases are kept in the same tree(s), so nothing more need to be done.

On the target, edit the file '/etc/opkg/base_files.conf' to reflect the location of
the packages and the HTTP server.  Of course, if these are correct in local.conf, they
will already be correct on the target.

Before doing any operations on the target, the local copy of the package databases
(meta-data) needs to be up to date.
  # opkg update

To install a new program, or update an already installed package:
  # opkg install <package>
e.g.
  # opkg install i2c-tools

If a number of packages have been updated and you want to reinstall them all:
  # opkg upgrade

Of course, opkg manages package dependencies and will download/install any necessary
packages.

========= Updating the downloaded sources

The build process using bitbake is designed to download source packages in
order to accomplish the building of the various recipes.  These source packages
can come from a local source mirror (that's how conf/local.conf will be set up)
or if not present locally, from the appropriate web URL.  If bitbake has to actually
download new sources, they will be placed in ${BUILD}/downloads.  The best thing to
do once a build has completed is to push any freshly downloaded files to the shared
source mirror.  Assuming that this mirror is at ${YOCTO}/downloads (it can be an
actual directory or symlink to a shared/NFS tree), use this script:

  % export PATH=${YOCTO}/meta-bbb/scripts:$PATH
  % save_downloads

Now the next build, the sources will come from the local mirror and not the net.
Note that this can have a substantial savings in both time and network bandwidth.
GIT based repositories (used by many recipes) can be especially large and take
quite a long time to download.  In the case of SCM repositories, a tar archive 
will be made in downloads that represents the whole thing which can be placed
on the local mirror.

Using the local mirror can totally eliminate the need for network access once
fully populated.  It's also great for making snapshots of the Poky/Yocto build
environment as a copy of the ${YOCTO} meta-data plus [possibly a subset of] the
source mirror is all you need to be able to completely recreate builds from a
given time/date.  You can use the script 'scripts/make_sources_list' to extract
the files needed from a given build.

  % export PATH=${YOCTO}/meta-bbb/scripts:$PATH
  % bitbake some-image -c fetchall
  % save_downloads
  % make_sources_list >/tmp/needed_packages
  % tar -cf /tmp/packages.tar -C ${YOCTO}/sources -T /tmp/needed_packages
  % tar -cjf /tmp/yocto.tar.bz2 -C ${YOCTO} --exclude=sources/ .
